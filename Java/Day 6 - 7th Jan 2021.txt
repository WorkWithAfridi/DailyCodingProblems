Question: 
An XOR linked list is a more memory efficient doubly linked list.
Instead of each node holding next and prev fields, it holds a field named both, which is an XOR of the next node and the previous node.
Implement an XOR linked list; it has an add(element) which adds the element to the end, and a get(index) which returns the node at index.

If using a language that has no pointers (such as Python),
you can assume you have access to get_pointer and dereference_pointer functions that converts between nodes and memory addresses.

Answer:
An ordinary Doubly Linked List requires space for two address fields to store the addresses of previous and next nodes. 
A memory efficient version of Doubly Linked List can be created using only one space for address field with every node. 
This memory efficient Doubly Linked List is called XOR Linked List or Memory Efficient as the list uses bitwise XOR operation to save space for one address. 
In the XOR linked list, instead of storing actual memory addresses, every node stores the XOR of addresses of previous and next nodes.

#include<iostream>
using namespace std;
class Node{
public:
    int data;
    Node* npx;
};
Node* XOR(Node*a,Node*b){
    return reinterpret_cast<Node*>(
                                   reinterpret_cast<uintptr_t>(a)^
                                   reinterpret_cast<uintptr_t>(b));
}
void insert(Node **head_ref, int data){
    Node*new_node=new Node();
    new_node->data=data;
    new_node->npx=*head_ref;
    if(*head_ref!=NULL){
        (*head_ref)->npx = XOR(new_node, (*head_ref)->npx);
    }

    *head_ref=new_node;
}
void printList(Node*head){
    Node*curr=head;
    Node*prev=NULL;
    Node*next;
    cout<<"Following are the nodes of Linked list: \n";
    while(curr!=NULL)
    {
        cout<<curr->data<<" ";
        next = XOR(prev, curr->npx);
        prev = curr;
        curr = next;
    }
}
int main()
{
    Node*head=NULL;
    insert(&head,10);
    insert(&head,20);
    insert(&head,30);
    insert(&head,40);

    printList(head);
    return(0);
}
