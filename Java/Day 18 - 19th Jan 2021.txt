Question: 

Given an array of integers and a number k, where 1 <= k <= length of the array, compute the maximum values of each subarray of length k.

For example, given array = [10, 5, 2, 7, 8, 7] and k = 3, we should get: [10, 7, 8, 8], since:

10 = max(10, 5, 2)
7 = max(5, 2, 7)
8 = max(2, 7, 8)
8 = max(7, 8, 7)
Do this in O(n) time and O(k) space. You can modify the input array in-place and you do not need to store the results. 
You can simply print them out as you compute them.

Answer: 

package Main;

import java.util.*;

class Main{
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter '0' to exit loop.");
        ArrayList<Integer> array = new ArrayList<>();
        while(true){
            System.out.print("Enter number: ");
            int x = scan.nextInt();
            if(x==0) break;
            array.add(x);
        }
        System.out.print("Enter K: ");
        int K = scan.nextInt();
        int size = array.size();
        HashMap<Integer, String> maxList = new HashMap<>();
        for(int i=0; i<size-K+1; i++) {
            int max = 0;
            int count = 0;
            int j = i;
            String list = " ";
            while (count < K) {
                if (max < array.get(i + count)) { max = array.get(i+count); }
                list += array.get(i+count) + ",";
                count++;
            }
            System.out.println(max+" = max("+list+")");
        }
        }
    }