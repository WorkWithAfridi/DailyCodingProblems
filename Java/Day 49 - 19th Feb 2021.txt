Question:

Given an array of numbers, find the maximum sum of any contiguous subarray of the array.

For example, given the array [34, -50, 42, 14, -5, 86], the maximum sum would be 137, since we would take elements 42, 14, -5, and 86.

Given the array [-5, -1, -8, -9], the maximum sum would be 0, since we would not take any elements.

Do this in O(N) time.





Answer:


package com.dailyCodingProblems;

import java.util.ArrayList;

public class Main {

    public static void main(String[] args) {
        int[] array = {34,-50,42,14,-5,86};
//        int[] array = {-5,-1,-8,-9};
        int max=0;
        for(int i=0; i< array.length; i++){

            int sum=0;
            for(int j=i; j< array.length; j++){
                sum+=array[j];
            }
            if(sum>max) max=sum;
        }
        if(max>0){
            System.out.println("Max: "+max);
        }else{
            System.out.println("Max: 0");
        }
    }
}
