Question:
Find an efficient algorithm to find the smallest distance (measured in number of words) between any two given words in a string.

For example, given words "hello", and "world" and a text content of "dog cat hello cat dog dog hello cat world", 
return 1 because there's only one word "cat" in between the two words.


Answer:
package com.dailyCodingProblems;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;
import java.util.Scanner;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.print("Enter sentence: ");
        String sentence = scan.nextLine().toLowerCase(Locale.ROOT);
        System.out.print("Enter 1st Word: ");
        String firstWord = scan.nextLine().toLowerCase(Locale.ROOT).trim();
        System.out.print("Enter 2nd Word: ");
        String secondWord = scan.nextLine().toLowerCase(Locale.ROOT).trim();
        System.out.println("The sentence is '"+sentence+"'. And the two words are: "+firstWord+", "+secondWord+".");

        //using String split function
        String[] words = sentence.split(" ");
     //   System.out.println("Array of the sentence, spilt method-> "+ Arrays.toString(words));

        //using java.util.regex Pattern
      //  Pattern pattern = Pattern.compile(" ");
      //  words = pattern.split(sentence);
      //  System.out.println("Array of sentence, Java regex method-> "+Arrays.toString(words));

        int count=100000;
        for(String word :words){
            if(word.trim().equals(firstWord)){
                count=0;
                continue;
            }
            if(word.trim().equals(secondWord)){
                break;
            }
            if(count>=0 && count<100000){
                count++;
            }
        }
        System.out.println("Number of words in between "+firstWord+" and "+secondWord+": "+count);
    }
}
