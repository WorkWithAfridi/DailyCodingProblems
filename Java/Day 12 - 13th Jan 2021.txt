Question:

There exists a staircase with N steps, and you can climb up either 1 or 2 steps at a time. 
Given N, write a function that returns the number of unique ways you can climb the staircase. The order of the steps matters.

For example, if N is 4, then there are 5 unique ways:

1, 1, 1, 1
2, 1, 1
1, 2, 1
1, 1, 2
2, 2

What if, instead of being able to climb 1 or 2 steps at a time, you could climb any number from a set of positive integers X? 
For example, if X = {1, 3, 5}, you could climb 1, 3, or 5 steps at a time.

Answer:

package Main;

import java.util.ArrayList;
import java.util.Locale;
import java.util.Scanner;

class Main{

//    static int fib(int n){
//        if(n<=1){
//            return n;
//        }
//        return fib(n-1) + fib(n-2);
//    }
//    static int countWays(int s){
//        return fib(s+1);
//    }


    static int countWaysUtil(int n, int m){
        if(n<=1) return n;
        int res=0;
        for(int i=1; i<=m && i<=n; i++){
            res+= countWaysUtil(n-i, m);
        }
        return res;
    }
    static int countWays(int s, int m){
        return countWaysUtil(s+1, m);
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.print("Enter the number of steps: ");
        int steps = 0;
        int Tsteps = 0;
        try{steps =  scan.nextInt();
            System.out.print("Enter the number of steps that person can take: ");
            Tsteps = scan.nextInt();
            }catch(Exception e){ System.out.println("Error occurred."); e.printStackTrace(); }
        System.out.println("Number of ways: "+ countWaysUtil(steps, Tsteps));
    }

}